using afSizzle
using xml

// TODO: expose the XElems
** Represents a number of HTML elements as returned from `BedClient` select CSS methods.
mixin Element {
	
	internal abstract XElem[]	elems
		
	// ---- Standard Methods -------------------------------------------------------------------------------------------
	
	** Returns 'true' if this element exists.
	Bool exists() {
		!elems.isEmpty
	}
	
	** Returns 'true' if this element does not exists.
	Bool doesNotExist() {
		elems.isEmpty
	}
	
	** Returns the text content of this element and it's child elements.
	Str text() {
		getText(findElem)
	}

	** Returns the markup generated by this node, including the element itself. 
	Str markup() {
		getMarkup(findElem)
	}

	** Returns the markup generated by the children of this node. 
	Str childMarkup() {
		getChildMarkup(findElem)
	}

	@Operator
	Str? getAttribute(Str name) {
		findElem.attr(name, false).val
	}

	@Operator
	This getAtIndex(Int index) {
		newElement(elems[index], index)
	}

	** Returns the number of elements found by the selector
	Int size() {
		elems.size
	}

	** Finds elements *inside* this element.
	abstract Element find(Str cssSelector)
	
	** Return all elements as a list.
	abstract Element[] list()
	
	// ---- Internal Methods -------------------------------------------------------------------------------------------
	
	Void verifyExists() {
		verifyTrue(exists, "CSS does NOT exist: ")
	}
	
	Void verifyDoesNotExists() {
		verifyTrue(doesNotExist, "CSS DOES exist: ")
	}
	
	Void verifyText(Obj expected) {
		verifyEq(text, expected)
	}
	
	Void verifyTextContains(Obj contains) {
		verifyTrue(text.trim.lower.contains(contains.toStr.trim.lower), "Text does NOT contain '${contains}': ")
	}
	
	Void verifyTextIsEmpty() {
		verifyTrue(text.isEmpty, "Text is NOT empty: ")
	}
	
	Void verifyChildMarkup(Obj expected) {
		verifyEq(childMarkup, expected)
	}
	
	Void verifyMarkup(Obj expected) {
		verifyEq(markup, expected)
	}
	
	Void verifyAttrExists(Str attrName) {
		verifyTrue(findElem.attr(attrName, false) != null, "Attribute '${attrName}' does NOT exist: ")
	}

	Void verifyAttrEq(Str attrName, Obj expected) {
		verifyAttrExists(attrName)
		verifyEq(findElem.attr(attrName).val, expected)
	}
	
	Void verifySize(Int expectedSize) {
		verifyEq(size.toStr, expectedSize)
	}
	
	// ---- Internal Methods -------------------------------------------------------------------------------------------

	abstract internal This newElement(XElem elem, Int index)

	abstract internal Void fail(Str msg)
	
	abstract internal Void verifyTrue(Bool condition, Str msg)

	abstract internal Void verifyEq(Str actual, Obj expected)
	
	internal XElem findElem() {
		if (elems.size != 1)
			fail("CSS does not exist: ")
		return elems.first
	}

	private Str getMarkup(XElem elem) {
		elem.writeToStr
	}

	internal Str getChildMarkup(XElem elem) {
		elem.children.map |XNode node->Str| { node.writeToStr }.join
	}

	private Str getText(XNode node) {
		if (node is XText)
			return ((XText) node).val
		if (node is XElem)
			return ((XElem) node).children.map { getText(it) }.join
		return Str.defVal
	}
}


