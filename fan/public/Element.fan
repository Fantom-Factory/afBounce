using afSizzle
using xml

** Represents a number of HTML elements as returned from `BedClient` select CSS methods.
const class Element {
	
	private const ElemFinder finder
	
	static new fromCss(Str cssSelector) {
		Element(FindFromBedClient(cssSelector)) 
	}
	
	@NoDoc
	new fromFinder(ElemFinder elemFinder) {
		this.finder = elemFinder 
	}

	
	
	// ---- Standard Methods -------------------------------------------------------------------------------------------
	
	** Returns 'true' if this element exists.
	Bool exists() {
		!findElems.isEmpty
	}
	
	** Returns the text content of this element and it's child elements.
	Str text() {
		getText(findElem)
	}

	** Returns the markup generated by this node, including the element itself. 
	Str html() {
		getHtml(findElem)
	}

	** Returns the markup generated by the children of this node. 
	Str innerHtml() {
		getInnerHtml(findElem)
	}

	@Operator
	Str? getAttribute(Str name) {
		findElem.attr(name, false).val
	}

	@Operator
	This getAtIndex(Int index) {
		newElementAtIndex(index)
	}

	** Returns the number of elements found by the selector
	Int size() {
		findElems.size
	}

	** Finds elements *inside* this element.
	Element find(Str cssSelector) {
		newElementFromCss(cssSelector)		
	}
	
	** Return all elements as a list.
	Element[] list() {
		findElems.map |elem, i| { newElementAtIndex(i) }
	}
	
	** Return the underlying 'XElem' objects
	XElem[] xelems() {
		findElems
	}
	
	
	
	// ---- Verify Methods ---------------------------------------------------------------------------------------------
	
	Void verifyExists() {
		verifyTrue(exists, "CSS does NOT exist: ")
	}
	
	Void verifyDoesNotExists() {
		verifyTrue(!exists, "CSS DOES exist: ")
	}
	
	Void verifyTextEq(Obj expected) {
		verifyEq(text, expected)
	}

	Void verifyTextContains(Obj contains) {
		verifyTrue(text.trim.lower.contains(contains.toStr.trim.lower), "Text does NOT contain '${contains}': ")
	}
	
	Void verifyInnerHtmlEq(Obj expected) {
		verifyEq(innerHtml, expected)
	}
	
	Void verifyHtmlEq(Obj expected) {
		verifyEq(html, expected)
	}
	
	Void verifyAttrExists(Str attrName) {
		verifyTrue(findElem.attr(attrName, false) != null, "Attribute '${attrName}' does NOT exist: ")
	}

	Void verifyAttrEq(Str attrName, Obj expected) {
		verifyAttrExists(attrName)
		verifyEq(findElem.attr(attrName).val, expected)
	}
	
	Void verifySizeEq(Int expectedSize) {
		verifyEq(size.toStr, expectedSize)
	}
	
	
	
	// ---- Common Verify Methods --------------------------------------------------------------------------------------

	@NoDoc
	protected Void verifyTrue(Bool condition, Str msg) {
		Verify().verify(condition, msg + toStr)
	}
	
	@NoDoc
	protected Void verifyEq(Str actual, Obj expected) {
		if (actual.trim.lower != expected.toStr.trim.lower)
			Verify().verifyEq(actual, expected)
	}

	@NoDoc
	protected Void fail(Str msg) {
		Verify().fail(msg + toStr)
	}
	

	
	// ---- Finder Methods ---------------------------------------------------------------------------------------------

	@NoDoc
	virtual protected XElem findElem() {
		elems := findElems
		if (elems.size != 1)
			fail("CSS does not exist: ")
		return elems.first
	}

	@NoDoc
	virtual protected XElem[] findElems() {
		finder.findElems
	}

	

	// ---- Private Methods --------------------------------------------------------------------------------------------

	private Element newElementAtIndex(Int index) {
		Element(finder.clone(FindAtIndex(index)))
	}

	private Element newElementFromCss(Str cssSelector) {
		Element(finder.clone(FindFromCss(cssSelector)))
	}
	
	private Str getHtml(XElem elem) {
		elem.writeToStr
	}

	private Str getInnerHtml(XElem elem) {
		elem.children.map |XNode node->Str| { node.writeToStr }.join
	}

	private Str getText(XNode node) {
		if (node is XText)
			return ((XText) node).val
		if (node is XElem)
			return ((XElem) node).children.map { getText(it) }.join
		return Str.defVal
	}

	override Str toStr() {
		return finder.toStr + "\n" + findElems.map { getHtml(it) }.join("\n")
	}
}

internal class Verify : Test {}
